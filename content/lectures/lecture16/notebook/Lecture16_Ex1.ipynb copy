{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 1,
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# \u003cimg style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"\u003e CS-109A Introduction to Data Science \n",
                "\n",
                "## Lecture 16: Review and a Preview\n",
                "\n",
                "**Harvard University**\u003cbr/\u003e\n",
                "**Fall 2020**\u003cbr/\u003e\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "import pandas as pd\n",
                "import sys\n",
                "import numpy as np\n",
                "import sklearn as sk\n",
                "import scipy as sp\n",
                "import matplotlib.pyplot as plt\n",
                "import seaborn as sns\n",
                "import datetime\n",
                "%matplotlib inline\n",
                "\n",
                "from sklearn.linear_model import LinearRegression\n",
                "from sklearn.linear_model import LogisticRegression\n",
                "from sklearn.neighbors import KNeighborsClassifier \n",
                "from sklearn.neighbors import KNeighborsRegressor\n",
                "import sklearn.metrics as met\n",
                "\n",
                "from sklearn.preprocessing import PolynomialFeatures\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies = pd.read_csv('tmdb_5000_movies.csv')\n",
                "#credits = pd.read_csv('tmdb_5000_credits.csv')\n",
                "\n",
                "movies.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "#credits.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(movies.dtypes)\n",
                "\n",
                "quants = movies.columns[(movies.dtypes == \"int64\") | (movies.dtypes == \"float64\") ].values\n",
                "quants = quants[quants!='id']"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "pd.Series(np.append(quants,'year'))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies['release_date'] = pd.to_datetime(movies['release_date'])\n",
                "movies['year'] = pd.DatetimeIndex(movies['release_date']).year\n",
                "movies['month'] = pd.DatetimeIndex(movies['release_date']).month\n",
                "movies['decade'] = ((movies['year']) // 10)*10"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "oldest = np.argmin(movies['release_date'])\n",
                "newest = np.argmax(movies['release_date'])\n",
                "\n",
                "print(\"Oldest Movie:\" , movies['title'][oldest], \" in\", movies['release_date'][oldest])\n",
                "print(\"Newest Movie:\" , movies['title'][newest], \" in\", movies['release_date'][newest])\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "sns.pairplot(movies[np.append(quants,'year')]);"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies_raw = movies.copy()"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "---"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Breakout 1 Tasks (15-20min): \n",
                "1. Someone share (the person who resides closest to the Bahamasâ€¦thanks Columbus).  Someone different will share in the next breakout.\n",
                "2. Explore the data (some of that is done for you above).  Please do a little more exploration and wrangling.\n",
                "3. Come up with an interesting question or two you can answer with this data set. Come up with a question or two that can be answered with supplemental data:\t\n",
                "    - start with ideal, and then get more practical based on what is likely available. "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                ""
            ]
        }
    ]
}
