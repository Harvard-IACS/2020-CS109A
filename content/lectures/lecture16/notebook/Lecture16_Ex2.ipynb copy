{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 1,
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Breakout 2 Tasks (20+min): \n",
                "\n",
                "1. Someone else share and take notes (who resides furthest from the Bahamas)\n",
                "2. Solidify your question(s) of interest.\n",
                "3. Determine the next tasks:\t\n",
                "    - What other data do you need?  How will this data be collected and combined?\n",
                "    - What data cleaning and wrangling tasks are needed?\n",
                "    - What other EDA is necessary?  What visuals should be included?\n",
                "    - What is a goal for a first baseline model (Key: should be interpretable)? (Be sure to include the class of model and the variables involved.\n",
                "     - What is a reasonable goal for a final model and product?\n",
                "4. Determine how long each task should take.\n",
                "5. Assign next tasks to group members.  Do not actual perform these tasks!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 95,
            "metadata": {},
            "outputs": [],
            "source": [
                "import pandas as pd\n",
                "import sys\n",
                "import numpy as np\n",
                "import sklearn as sk\n",
                "import scipy as sp\n",
                "import matplotlib.pyplot as plt\n",
                "import seaborn as sns\n",
                "import datetime\n",
                "%matplotlib inline\n",
                "\n",
                "from sklearn.linear_model import LinearRegression\n",
                "from sklearn.linear_model import LogisticRegression\n",
                "from sklearn.neighbors import KNeighborsClassifier \n",
                "from sklearn.neighbors import KNeighborsRegressor\n",
                "import sklearn.metrics as met\n",
                "\n",
                "from sklearn.preprocessing import PolynomialFeatures\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 137,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies = pd.read_csv('data/tmdb_5000_movies.csv')\n",
                "#credits = pd.read_csv('data/tmdb_5000_credits.csv')\n",
                "\n",
                "movies.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 138,
            "metadata": {},
            "outputs": [],
            "source": [
                "#credits.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 139,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(movies.dtypes)\n",
                "\n",
                "quants = movies.columns[(movies.dtypes == \"int64\") | (movies.dtypes == \"float64\") ].values\n",
                "quants = quants[quants!='id']"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 140,
            "metadata": {},
            "outputs": [],
            "source": [
                "pd.Series(np.append(quants,'year'))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 141,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies['release_date'] = pd.to_datetime(movies['release_date'])\n",
                "movies['year'] = pd.DatetimeIndex(movies['release_date']).year\n",
                "movies['month'] = pd.DatetimeIndex(movies['release_date']).month\n",
                "movies['decade'] = ((movies['year']) // 10)*10"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 142,
            "metadata": {},
            "outputs": [],
            "source": [
                "oldest = np.argmin(movies['release_date'])\n",
                "newest = np.argmax(movies['release_date'])\n",
                "\n",
                "print(\"Oldest Movie:\" , movies['title'][oldest], \" in\", movies['release_date'][oldest])\n",
                "print(\"Newest Movie:\" , movies['title'][newest], \" in\", movies['release_date'][newest])\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 143,
            "metadata": {},
            "outputs": [],
            "source": [
                "sns.pairplot(movies[np.append(quants,'year')]);"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 145,
            "metadata": {},
            "outputs": [],
            "source": [
                "f, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\n",
                "\n",
                "ax1.scatter(movies['budget'],movies['revenue'])\n",
                "ax1.set_title(\"Revenue vs. Budget\")\n",
                "\n",
                "ax2.scatter(np.log10(movies['budget']+0.1),np.log10(movies['revenue']+0.1))\n",
                "ax2.set_title(\"Revenue vs. Budget (both on log10 scale)\")\n",
                "plt.show()\n",
                "\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 146,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(np.sum(movies['runtime']==0))\n",
                "movies[(movies['budget']\u003c1000) | (movies['revenue']\u003c1000 )][['revenue','budget']]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 147,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies_raw = movies.copy()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 148,
            "metadata": {},
            "outputs": [],
            "source": [
                "movies = movies[(movies['budget']\u003e=1000) \u0026 (movies['revenue']\u003e=1000 )]\n",
                "\n",
                "movies['logbudget'] = np.log10(movies['budget'])\n",
                "movies['logrevenue'] = np.log10(movies['revenue'])\n",
                "\n",
                "f, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))\n",
                "\n",
                "ax1.scatter(movies['logbudget'],movies['logrevenue'])\n",
                "ax1.set_title(\"Revenue vs. Budget (both on log10 scale) After Trimming\")\n",
                "\n",
                "ax2.scatter(movies['budget'],movies['revenue'])\n",
                "ax2.set_title(\"Revenue vs. Budget After Trimming\")\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 149,
            "metadata": {},
            "outputs": [],
            "source": [
                "ols1 = LinearRegression()\n",
                "ols1.fit(movies[['logbudget']],movies['logrevenue'])\n",
                "\n",
                "print(f\"Estimated Linear Regression Coefficients: Intercept = {ols1.intercept_:.4f}, Slope(s) = {ols1.coef_[0]:.4f}\")\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 150,
            "metadata": {},
            "outputs": [],
            "source": [
                "ols2 = LinearRegression()\n",
                "ols2.fit(movies[['logbudget','year']],movies['logrevenue'])\n",
                "\n",
                "print(f\"Estimated Linear Regression Coefficients: Intercept = {ols2.intercept_:.3f}, Slope(s) =\", np.round(ols2.coef_,5))\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 157,
            "metadata": {},
            "outputs": [],
            "source": [
                "poly = PolynomialFeatures(interaction_only=True,include_bias=False)\n",
                "X_interact = poly.fit_transform(movies[['logbudget','year']])"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 159,
            "metadata": {},
            "outputs": [],
            "source": [
                "ols3 = LinearRegression()\n",
                "ols3.fit(X_interact ,movies['logrevenue'])\n",
                "\n",
                "print(f\"Estimated Linear Regression Coefficients: Intercept = {ols3.intercept_:.3f}, Slope(s) =\", np.round(ols3.coef_,4))"
            ]
        }
    ]
}
