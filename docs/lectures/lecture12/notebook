{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4,
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import libraries\n",
                "\n",
                "%matplotlib inline\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "from sklearn.linear_model import Lasso\n",
                "from sklearn.linear_model import Ridge\n",
                "from sklearn.preprocessing import PolynomialFeatures"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Run this cell for more readable visuals \n",
                "\n",
                "large = 22; med = 16; small = 10\n",
                "params = {'axes.titlesize': large,\n",
                "          'legend.fontsize': med,\n",
                "          'figure.figsize': (16, 10),\n",
                "          'axes.labelsize': med,\n",
                "          'axes.titlesize': med,\n",
                "          'axes.linewidth': 2,\n",
                "          'xtick.labelsize': med,\n",
                "          'ytick.labelsize': med,\n",
                "          'figure.titlesize': large}\n",
                "plt.style.use('seaborn-white')\n",
                "plt.rcParams.update(params)\n",
                "#sns.set_style(\"white\")\n",
                "%matplotlib inline"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Read the file \"bacteria_train.csv\" as a dataframe\n",
                "# The file is the same as your homework 2\n",
                "\n",
                "df = pd.read_csv(\"bacteria_train.csv\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Take a quick look of your dataset\n",
                "\n",
                "df.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Store the predictor ('Spreading_factor') and the response ('Perc_population') values as the variables 'x' and 'y'\n",
                "\n",
                "x, y  = df[[___]], df[___]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Select the number of polynomial features as per the maximum degree\n",
                "\n",
                "maxdeg = 4\n",
                "x_poly = PolynomialFeatures(___).fit_transform(___)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Select a list of alpha values ranging from 10 to 120 with 1000 points between them\n",
                "\n",
                "alpha_list = np.linspace(___,___,___)\n",
                "len(alpha_list)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "### edTest(test_ridge_fit) ###\n",
                "# Make an empty list called coeff_list and for each alpha value, compute the coefficients and add it to coeff_list\n",
                "coeff_list = []\n",
                "\n",
                "\n",
                "#Now, you will implement the ridge regularisation for each alpha value, make sure you set Normalize=True\n",
                "\n",
                "for i in alpha_list:\n",
                "\n",
                "    ridge_reg = Ridge(alpha=___,normalize=___)\n",
                "\n",
                "    #Fit on the entire data because we just want to see the trend of the coefficients\n",
                "\n",
                "    ridge_reg.fit(___, ___)\n",
                "    \n",
                "    # Append the coeff_list with the coefficients of the model\n",
                "    \n",
                "    coeff_list.append(___)\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# We take the transpose of the list to get the variation in the coefficient values per degree\n",
                "\n",
                "trend = np.array(coeff_list).T"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Use the code below to plot the variation of the coefficients as per the alpha value\n",
                "\n",
                "# Just adding some nice colors. make sure to comment this cell out if you plan to use degree more than 7\n",
                "colors = ['#5059E8','#9FC131FF','#D91C1C','#9400D3','#FF2F92','#336600','black']\n",
                "\n",
                "fig, ax = plt.subplots(figsize = (10,6))\n",
                "for i in range(maxdeg):\n",
                "    ax.plot(alpha_list,np.abs(trend[i+1]),color=colors[i],alpha = 0.9,label = f'Degree {i+1}',lw=2.2)\n",
                "    ax.legend(loc='best',fontsize=10)\n",
                "    ax.set_xlabel(r'$\\alpha$ values', fontsize=20)\n",
                "    ax.set_ylabel(r'$\\beta$ values', fontsize=20)\n",
                "\n",
                "fig.suptitle(r'Ridge ($L_2$) Regression');"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Compare the results of Ridge regression with the Lasso variant"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Select a list of alpha values ranging from 1e-4 to 1e-1 with 1000 points between them\n",
                "\n",
                "alpha_list = np.linspace(___,___,___)\n",
                "len(alpha_list)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "### edTest(test_lasso_fit) ###\n",
                "# Make an empty list called coeff_list and for each alpha value, compute the coefficients and add it to coeff_list\n",
                "coeff_list = []\n",
                "\n",
                "\n",
                "#Now, you will implement the ridge regularisation for each alpha value, again normalize\n",
                "\n",
                "for i in alpha_list:\n",
                "\n",
                "    lasso_reg = Lasso(alpha=i,max_iter=250000,normalize=___)\n",
                "\n",
                "    #Fit on the entire data because we just want to see the trend of the coefficients\n",
                "    \n",
                "    lasso_reg.fit(___, ___)\n",
                "    \n",
                "    # Again append the coeff_list with the coefficients of the model\n",
                "    \n",
                "    coeff_list.append(___)\n",
                ""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# We take the transpose of the list to get the variation in the coefficient values per degree\n",
                "\n",
                "trend = np.array(coeff_list).T"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Use helper code below to plot the variation of the coefficients as per the alpha value\n",
                "\n",
                "colors = ['#5059E8','#9FC131FF','#D91C1C','#9400D3','#FF2F92','#336600','black']\n",
                "\n",
                "fig, ax = plt.subplots(figsize = (10,6))\n",
                "for i in range(maxdeg):\n",
                "    ax.plot(alpha_list,np.abs(trend[i+1]),color=colors[i],alpha = 0.9,label = f'Degree {i+1}',lw=2)\n",
                "    ax.legend(loc='best',fontsize=10)\n",
                "    ax.set_xlabel(r'$\\alpha$ values', fontsize=20)\n",
                "    ax.set_ylabel(r'$\\beta$ values', fontsize=20)\n",
                "\n",
                "fig.suptitle(r'Lasso ($L_1$) Regression');"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Mindchow üç≤\n",
                "After marking the exercise, go back and change your maximum degree, and see how your coefficients vary for higher degrees\n",
                "\n",
                "\u003e Remember to hide your `colors` variable to avoid `index error` while plotting coefficients"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Your answer here"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Now set the normalize=False. Things look different. Try to think why - Hint think of colinearity. "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "outputs": [],
            "source": [
                ""
            ]
        }
    ]
}
